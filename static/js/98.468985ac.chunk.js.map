{"version":3,"sources":["screens/signUpCompany.js","screens/company/signUpScreen.js"],"names":["SignUpScreenCompany","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","signUpLoadingButton","state","phase","react_default","a","createElement","Button","color","block","disabled","class","role","aria-hidden","handleChange","event","target","value","type","checked","name","console","log","setState","defineProperty","onSubmit","_ref","asyncToGenerator","regenerator_default","mark","_callee","e","errors","wrap","_context","prev","next","preventDefault","length","alert","join","signUpUserCompany","history","push","userCreateSuccess","t0","userCreateFailed","stop","_x","apply","arguments","company_name","company_email","company_phone","company_type","_this2","isAuthenticated","Redirect","to","concat","redirectTo","split","className","Container","Row","Col","md","lg","xl","Card","CardBody","Form","InputGroup","InputGroupAddon","addonType","InputGroupText","placeholder","onChange","required","htmlFor","id","selected","password","confPass","CardFooter","Component","connect","auth","authenticated","navigation","dispatch","signInAction","username","signIn","__webpack_exports__","signUpCompany"],"mappings":"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","file":"static/js/98.468985ac.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    InputGroupText,\r\n    Row\r\n} from 'reactstrap';\r\n\r\nimport { isUsernameAvailable, signUpUserCompany, signUpUserShipper, signUpUserSupplier } from \"../helpers/api\";\r\nimport history from '../history';\r\nimport { userCreateSuccess, userCreateFailed } from '../helpers/notifications';\r\nimport { signIn } from \"../actions/auth\";\r\nimport { connect } from \"react-redux\";\r\nimport Redirect from \"react-router/es/Redirect\";\r\n\r\n// const NAME_REGEX = '^[A-Z a-z]';\r\nconst USERNAME_REGEX = '^[\\\\w.@+-]+$';\r\n\r\n// const PASSWORD_REGEX = '^.{6}.+$';\r\n\r\nclass SignUpScreenCompany extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            company_name: '',\r\n            company_email: '',\r\n            company_phone: '',\r\n            company_type: '',\r\n            phase: 0,\r\n        };\r\n    }\r\n\r\n\r\n    signUpLoadingButton = () => {\r\n        if (this.state.phase === 1) {\r\n            return (\r\n                <Button color=\"success\" block disabled>\r\n                    <span class=\"spinner-border spinner-border-sm\" role=\"status\" aria-hidden=\"true\"></span> Loading\r\n                </Button>\r\n            );\r\n        }\r\n\r\n        return <Button color=\"success\" block>Create Account</Button>;\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        console.log(event, target, name, value);\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        this.setState({ phase: 1 })\r\n        console.log(this.state);\r\n\r\n        let errors = [];\r\n        // if (!this.state.username.match(USERNAME_REGEX))\r\n        //     errors.push('Username not valid');\r\n\r\n        // else {\r\n        //     const data = await isUsernameAvailable(this.state.username);\r\n        //     if (!data.available)\r\n        //         errors.push(`Username '${data.username}' not available`);\r\n        // }\r\n        if (errors.length !== 0)\r\n            alert(errors.join('\\n'));\r\n        else {\r\n            if (this.props.type === \"Company\") {\r\n                try {\r\n                    console.log(this.state, 'gatate')\r\n                    await signUpUserCompany(this.state);\r\n                    this.setState({ phase: 0 })\r\n                    history.push(\"/\");\r\n                    userCreateSuccess(\"Company\");\r\n                    //alert('User created successful');\r\n                    // this.props.signInAction(this.state.username, this.state.password)\r\n                } catch (e) {\r\n                    userCreateFailed();\r\n                    console.log(e)\r\n                }\r\n            }\r\n        }\r\n        this.setState({ phase: 0 })\r\n    };\r\n\r\n\r\n    render() {\r\n        if (this.props.isAuthenticated)\r\n            return <Redirect to={`${this.props.redirectTo.split('#')[1]}`} />;\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"app flex-row align-items-center\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n                            <Card className=\"mx-4\">\r\n                                <CardBody className=\"p-4\">\r\n                                    <Form onSubmit={this.onSubmit}>\r\n                                        <input type=\"hidden\" className={\"form-control\"} name=\"user-type\"\r\n                                            value={this.props.type} />\r\n                                        <h1>Register {this.props.type}</h1>\r\n                                        <p className=\"text-muted\">Create your account</p>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                <InputGroupText>\r\n                                                    <i className=\"icon-user\" />\r\n                                                </InputGroupText>\r\n                                            </InputGroupAddon>\r\n                                            <input placeholder={'Name'} type=\"text\" className={\"form-control\"}\r\n                                                name={\"company_name\"}\r\n                                                onChange={this.handleChange}\r\n                                                value={this.state.company_name} required />\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                <InputGroupText>@</InputGroupText>\r\n                                            </InputGroupAddon>\r\n                                            <input type=\"email\" placeholder={'Email'} name={\"company_email\"}\r\n                                                className={\"form-control\"}\r\n                                                onChange={this.handleChange}\r\n                                                value={this.state.company_email} required />\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                <InputGroupText>\r\n                                                    <i className=\"icon-lock\" />\r\n                                                </InputGroupText>\r\n                                            </InputGroupAddon>\r\n                                            <input type=\"phone\" placeholder={'Phone'}\r\n                                                name={\"company_phone\"}\r\n                                                className={\"form-control\"}\r\n                                                onChange={this.handleChange}\r\n                                                value={this.state.company_phone} required />\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-4\">\r\n                                            <div className=\"input-group-prepend\">\r\n                                                <label className=\"input-group-text\"\r\n                                                    htmlFor=\"inputGroupSelect01\">Company</label>\r\n                                            </div>\r\n                                            <select onChange={(e) => {\r\n                                                this.setState({ company_type: e.target.value })\r\n                                            }} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n                                                <option value={''} selected>Choose...</option>\r\n                                                <option value={'supplier'} selected>Supplier</option>\r\n                                                <option value={'shipper'}>Shipper</option>\r\n                                            </select>\r\n                                        </InputGroup>\r\n\r\n                                        {this.state.password !== this.state.confPass ? \"Password and confirm password should be same\" : \"\"}\r\n                                        <br />\r\n                                        <br />\r\n                                        {this.signUpLoadingButton()}\r\n                                    </Form>\r\n                                </CardBody>\r\n                                <CardFooter className=\"p-4\">\r\n                                </CardFooter>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: state.auth.authenticated,\r\n    redirectTo: state.navigation.redirectTo\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    signInAction: (username, password) => dispatch(signIn(username, password)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpScreenCompany);\r\n","import React from \"react\";\r\nimport SignUpScreen from \"../signUpCompany\";\r\n\r\nexport default () => (\r\n    <SignUpScreen type={'Company'}/>\r\n)\r\n"],"sourceRoot":""}