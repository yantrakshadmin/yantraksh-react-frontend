{"version":3,"sources":["screens/signUpCompany.js","screens/company/signUpScreen.js"],"names":["SignUpScreenCompany","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","event","target","value","type","checked","name","console","log","setState","defineProperty","onSubmit","_ref","asyncToGenerator","regenerator_default","a","mark","_callee","e","errors","wrap","_context","prev","next","preventDefault","state","length","alert","join","signUpUserCompany","history","push","userCreateSuccess","t0","userCreateFailed","stop","_x","apply","arguments","company_name","company_email","company_phone","company_type","_this2","isAuthenticated","react_default","createElement","Redirect","to","concat","redirectTo","split","className","Container","Row","Col","md","lg","xl","Card","CardBody","Form","InputGroup","InputGroupAddon","addonType","InputGroupText","placeholder","onChange","htmlFor","id","selected","password","confPass","Button","color","block","CardFooter","Component","connect","auth","authenticated","navigation","dispatch","signInAction","username","signIn","__webpack_exports__","signUpCompany"],"mappings":"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","file":"static/js/65.e6d23003.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport {\r\n    Button,\r\n    Card,\r\n    CardBody,\r\n    CardFooter,\r\n    Col,\r\n    Container,\r\n    Form,\r\n    InputGroup,\r\n    InputGroupAddon,\r\n    InputGroupText,\r\n    Row\r\n} from 'reactstrap';\r\n\r\nimport {isUsernameAvailable, signUpUserCompany, signUpUserShipper, signUpUserSupplier} from \"../helpers/api\";\r\nimport history from '../history';\r\nimport { userCreateSuccess,userCreateFailed } from '../helpers/notifications';\r\nimport {signIn} from \"../actions/auth\";\r\nimport {connect} from \"react-redux\";\r\nimport Redirect from \"react-router/es/Redirect\";\r\n\r\n// const NAME_REGEX = '^[A-Z a-z]';\r\nconst USERNAME_REGEX = '^[\\\\w.@+-]+$';\r\n\r\n// const PASSWORD_REGEX = '^.{6}.+$';\r\n\r\nclass SignUpScreenCompany extends Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            company_name: '',\r\n            company_email: '',\r\n            company_phone: '',\r\n            company_type: '',\r\n\r\n        };\r\n    }\r\n\r\n    handleChange = (event) => {\r\n        const target = event.target;\r\n        const value = target.type === 'checkbox' ? target.checked : target.value;\r\n        const name = target.name;\r\n        console.log(event,target,name,value);\r\n\r\n        this.setState({\r\n            [name]: value\r\n        })\r\n    };\r\n\r\n    onSubmit = async (e) => {\r\n        e.preventDefault();\r\n        console.log(this.state);\r\n\r\n        let errors = [];\r\n        // if (!this.state.username.match(USERNAME_REGEX))\r\n        //     errors.push('Username not valid');\r\n\r\n        // else {\r\n        //     const data = await isUsernameAvailable(this.state.username);\r\n        //     if (!data.available)\r\n        //         errors.push(`Username '${data.username}' not available`);\r\n        // }\r\n        if (errors.length !== 0)\r\n            alert(errors.join('\\n'));\r\n        else {\r\n            if (this.props.type === \"Company\") {\r\n                try {\r\n                    console.log(this.state,'gatate')\r\n                    await signUpUserCompany(this.state);\r\n                    history.push(\"/\");\r\n                    userCreateSuccess(\"Company\");\r\n                    //alert('User created successful');\r\n                    // this.props.signInAction(this.state.username, this.state.password)\r\n                } catch (e) {\r\n                    userCreateFailed();\r\n                    console.log(e)\r\n                }\r\n            }\r\n        }\r\n    };\r\n\r\n\r\n    render() {\r\n        if (this.props.isAuthenticated)\r\n            return <Redirect to={`${this.props.redirectTo.split('#')[1]}`}/>;\r\n\r\n\r\n        return (\r\n\r\n            <div className=\"app flex-row align-items-center\">\r\n                <Container>\r\n                    <Row className=\"justify-content-center\">\r\n                        <Col md=\"9\" lg=\"7\" xl=\"6\">\r\n                            <Card className=\"mx-4\">\r\n                                <CardBody className=\"p-4\">\r\n                                    <Form onSubmit={this.onSubmit}>\r\n                                        <input type=\"hidden\" className={\"form-control\"} name=\"user-type\"\r\n                                               value={this.props.type}/>\r\n                                        <h1>Register {this.props.type}</h1>\r\n                                        <p className=\"text-muted\">Create your account</p>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                <InputGroupText>\r\n                                                    <i className=\"icon-user\"/>\r\n                                                </InputGroupText>\r\n                                            </InputGroupAddon>\r\n                                            <input placeholder={'Name'} type=\"text\" className={\"form-control\"}\r\n                                                   name={\"company_name\"}\r\n                                                   onChange={this.handleChange}\r\n                                                   value={this.state.company_name}/>\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                <InputGroupText>@</InputGroupText>\r\n                                            </InputGroupAddon>\r\n                                            <input type=\"email\" placeholder={'Email'} name={\"company_email\"}\r\n                                                   className={\"form-control\"}\r\n                                                   onChange={this.handleChange}\r\n                                                   value={this.state.company_email}/>\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-3\">\r\n                                            <InputGroupAddon addonType=\"prepend\">\r\n                                                <InputGroupText>\r\n                                                    <i className=\"icon-lock\"/>\r\n                                                </InputGroupText>\r\n                                            </InputGroupAddon>\r\n                                            <input type=\"phone\" placeholder={'Phone'}\r\n                                                   name={\"company_phone\"}\r\n                                                   className={\"form-control\"}\r\n                                                   onChange={this.handleChange}\r\n                                                   value={this.state.company_phone}/>\r\n                                        </InputGroup>\r\n                                        <InputGroup className=\"mb-4\">\r\n                                            <div className=\"input-group-prepend\">\r\n                                                <label className=\"input-group-text\"\r\n                                                       htmlFor=\"inputGroupSelect01\">Company</label>\r\n                                            </div>\r\n                                            <select onChange={(e) => {\r\n                                                this.setState({company_type: e.target.value})\r\n                                            }} className=\"custom-select\" id=\"inputGroupSelect01\">\r\n                                                <option value={''} selected>Choose...</option>\r\n                                                <option value={'supplier'} selected>Supplier</option>\r\n                                                <option value={'shipper'}>Shipper</option>\r\n                                            </select>\r\n                                        </InputGroup>\r\n\r\n                                        {this.state.password !== this.state.confPass ? \"Password and confirm password should be same\" : \"\"}\r\n                                        <br/>\r\n                                        <br/>\r\n                                        <Button color=\"success\" block>Create Account</Button>\r\n                                    </Form>\r\n                                </CardBody>\r\n                                <CardFooter className=\"p-4\">\r\n                                </CardFooter>\r\n                            </Card>\r\n                        </Col>\r\n                    </Row>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    isAuthenticated: state.auth.authenticated,\r\n    redirectTo: state.navigation.redirectTo\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    signInAction: (username, password) => dispatch(signIn(username, password)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(SignUpScreenCompany);\r\n","import React from \"react\";\r\nimport SignUpScreen from \"../signUpCompany\";\r\n\r\nexport default () => (\r\n    <SignUpScreen type={'Company'}/>\r\n)\r\n"],"sourceRoot":""}