{"version":3,"sources":["screens/shipper/dashboard.js"],"names":["brandPrimary","lazy","__webpack_require__","e","then","bind","getStyle","brandSuccess","brandInfo","brandDanger","cardChartData1","labels","datasets","label","backgroundColor","borderColor","data","cardChartOpts1","tooltips","enabled","maintainAspectRatio","legend","display","scales","xAxes","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","cardChartData2","cardChartOpts2","tension","cardChartData3","cardChartOpts3","cardChartData4","cardChartOpts4","barPercentage","random","floor","data1","data2","data3","i","push","hexToRgba","ceil","Dashboard","props","_this","Object","c_Users_Rumeet_Singh_Desktop_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","c_Users_Rumeet_Singh_Desktop_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","c_Users_Rumeet_Singh_Desktop_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","calendarComponentRef","React","createRef","handleDateClick","arg","window","confirm","dateStr","setState","calendarEvents","state","concat","title","start","date","allDay","loading","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","className","toggle","c_Users_Rumeet_Singh_Desktop_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","onRadioBtnClick","dropdownOpen","radioSelected","mainChart","mapUrl","kpi","total_time","total_trucks","total_orders","total_orders_planned","total_rfq","total_bids","total_orders_hold","total_orders_delayed","total_orders_pending","total_trucks_assigned","total_trucks_in_transit","total_weight","total_distance","calendarWeekends","events","totalTrucks","weight","scheduled_date","totalWeight","getKPIData","getMap","console","log","_context","t0","map","t1","getEventsData","calendarEvent","_this2","getNumberOfTrucksData","trucks","truckData","series","item","y","getNumberOfWeightData","weightData","hoverBackgroundColor","hoverBorderColor","mainChart2","_this3","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","xs","sm","lg","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","id","isOpen","card1","style","height","react_chartjs_2__WEBPACK_IMPORTED_MODULE_9__","options","reactstrap__WEBPACK_IMPORTED_MODULE_16__","card2","card3","card4","reactstrap__WEBPACK_IMPORTED_MODULE_17__","md","xl","marginTop","paddingTop","padding","react_iframe__WEBPACK_IMPORTED_MODULE_20__","url","map2","width","_fullcalendar_react__WEBPACK_IMPORTED_MODULE_21__","defaultView","toString","slice","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","dateClick","ref","Component"],"mappings":"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","file":"static/js/68.5597a1b4.chunk.js","sourcesContent":["import React, { Component, lazy } from 'react';\r\nimport { Bar, Line, } from 'react-chartjs-2';\r\nimport { ButtonDropdown, ButtonGroup, Card, CardBody, CardHeader, CardTitle, Col, Dropdown, Row, } from 'reactstrap';\r\n\r\nimport { getStyle, hexToRgba } from '@coreui/coreui/dist/js/coreui-utilities'\r\nimport { getEventsData, getKPIData, getMap, getNumberOfTrucksData, getNumberOfWeightData } from \"../../helpers/api\";\r\nimport Iframe from 'react-iframe'\r\n\r\nimport FullCalendar from '@fullcalendar/react'\r\n\r\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\r\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\r\nimport interactionPlugin from \"@fullcalendar/interaction\";\r\n\r\n\r\nconst Widget03 = lazy(() => import('../../components/Widgets/Widget03'));\r\n\r\nconst brandPrimary = getStyle('--primary');\r\nconst brandSuccess = getStyle('--success');\r\nconst brandInfo = getStyle('--info');\r\nconst brandWarning = getStyle('--warning');\r\nconst brandDanger = getStyle('--danger');\r\n\r\n// Card Chart 1\r\nconst cardChartData1 = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n        {\r\n            label: 'My First dataset',\r\n            backgroundColor: brandPrimary,\r\n            borderColor: 'rgba(255,255,255,.55)',\r\n            data: [65, 59, 84, 84, 51, 55, 40],\r\n        },\r\n    ],\r\n};\r\n\r\nconst cardChartOpts1 = {\r\n    tooltips: {\r\n        enabled: false,\r\n        // custom: CustomTooltips\r\n    },\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n        display: false,\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                gridLines: {\r\n                    color: 'transparent',\r\n                    zeroLineColor: 'transparent',\r\n                },\r\n                ticks: {\r\n                    fontSize: 2,\r\n                    fontColor: 'transparent',\r\n                },\r\n\r\n            }],\r\n        yAxes: [\r\n            {\r\n                display: false,\r\n                ticks: {\r\n                    display: false,\r\n                    min: Math.min.apply(Math, cardChartData1.datasets[0].data) - 5,\r\n                    max: Math.max.apply(Math, cardChartData1.datasets[0].data) + 5,\r\n                },\r\n            }],\r\n    },\r\n    elements: {\r\n        line: {\r\n            borderWidth: 1,\r\n        },\r\n        point: {\r\n            radius: 4,\r\n            hitRadius: 10,\r\n            hoverRadius: 4,\r\n        },\r\n    }\r\n}\r\n\r\n\r\n// Card Chart 2\r\nconst cardChartData2 = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n        {\r\n            label: 'My First dataset',\r\n            backgroundColor: brandInfo,\r\n            borderColor: 'rgba(255,255,255,.55)',\r\n            data: [1, 18, 9, 17, 34, 22, 11],\r\n        },\r\n    ],\r\n};\r\n\r\nconst cardChartOpts2 = {\r\n    tooltips: {\r\n        enabled: false,\r\n        // custom: CustomTooltips\r\n    },\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n        display: false,\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                gridLines: {\r\n                    color: 'transparent',\r\n                    zeroLineColor: 'transparent',\r\n                },\r\n                ticks: {\r\n                    fontSize: 2,\r\n                    fontColor: 'transparent',\r\n                },\r\n\r\n            }],\r\n        yAxes: [\r\n            {\r\n                display: false,\r\n                ticks: {\r\n                    display: false,\r\n                    min: Math.min.apply(Math, cardChartData2.datasets[0].data) - 5,\r\n                    max: Math.max.apply(Math, cardChartData2.datasets[0].data) + 5,\r\n                },\r\n            }],\r\n    },\r\n    elements: {\r\n        line: {\r\n            tension: 0.00001,\r\n            borderWidth: 1,\r\n        },\r\n        point: {\r\n            radius: 4,\r\n            hitRadius: 10,\r\n            hoverRadius: 4,\r\n        },\r\n    },\r\n};\r\n\r\n// Card Chart 3\r\nconst cardChartData3 = {\r\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n    datasets: [\r\n        {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgba(255,255,255,.2)',\r\n            borderColor: 'rgba(255,255,255,.55)',\r\n            data: [78, 81, 80, 45, 34, 12, 40],\r\n        },\r\n    ],\r\n};\r\n\r\nconst cardChartOpts3 = {\r\n    tooltips: {\r\n        enabled: false,\r\n        // custom: CustomTooltips\r\n    },\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n        display: false,\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                display: false,\r\n            }],\r\n        yAxes: [\r\n            {\r\n                display: false,\r\n            }],\r\n    },\r\n    elements: {\r\n        line: {\r\n            borderWidth: 2,\r\n        },\r\n        point: {\r\n            radius: 0,\r\n            hitRadius: 10,\r\n            hoverRadius: 4,\r\n        },\r\n    },\r\n};\r\n\r\n// Card Chart 4\r\nconst cardChartData4 = {\r\n    labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\r\n    datasets: [\r\n        {\r\n            label: 'My First dataset',\r\n            backgroundColor: 'rgba(255,255,255,.3)',\r\n            borderColor: 'transparent',\r\n            data: [78, 81, 80, 45, 34, 12, 40, 75, 34, 89, 32, 68, 54, 72, 18, 98],\r\n        },\r\n    ],\r\n};\r\n\r\nconst cardChartOpts4 = {\r\n    tooltips: {\r\n        enabled: false,\r\n        // custom: CustomTooltips\r\n    },\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n        display: false,\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                display: false,\r\n                barPercentage: 0.6,\r\n            }],\r\n        yAxes: [\r\n            {\r\n                display: false,\r\n            }],\r\n    },\r\n};\r\n\r\n// Social Box Chart\r\nconst socialBoxData = [\r\n    { data: [65, 59, 84, 84, 51, 55, 40], label: 'facebook' },\r\n    { data: [1, 13, 9, 17, 34, 41, 38], label: 'twitter' },\r\n    { data: [78, 81, 80, 45, 34, 12, 40], label: 'linkedin' },\r\n    { data: [35, 23, 56, 22, 97, 23, 64], label: 'google' },\r\n];\r\n\r\nconst makeSocialBoxData = (dataSetNo) => {\r\n    const dataset = socialBoxData[dataSetNo];\r\n    const data = {\r\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\r\n        datasets: [\r\n            {\r\n                backgroundColor: 'rgba(255,255,255,.1)',\r\n                borderColor: 'rgba(255,255,255,.55)',\r\n                pointHoverBackgroundColor: '#fff',\r\n                borderWidth: 2,\r\n                data: dataset.data,\r\n                label: dataset.label,\r\n            },\r\n        ],\r\n    };\r\n    return () => data;\r\n};\r\n\r\nconst socialChartOpts = {\r\n    tooltips: {\r\n        enabled: false,\r\n        // custom: CustomTooltips\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n        display: false,\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                display: false,\r\n            }],\r\n        yAxes: [\r\n            {\r\n                display: false,\r\n            }],\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n            hitRadius: 10,\r\n            hoverRadius: 4,\r\n            hoverBorderWidth: 3,\r\n        },\r\n    },\r\n};\r\n\r\n// sparkline charts\r\nconst sparkLineChartData = [\r\n    {\r\n        data: [35, 23, 56, 22, 97, 23, 64],\r\n        label: 'New Clients',\r\n    },\r\n    {\r\n        data: [65, 59, 84, 84, 51, 55, 40],\r\n        label: 'Recurring Clients',\r\n    },\r\n    {\r\n        data: [35, 23, 56, 22, 97, 23, 64],\r\n        label: 'Pageviews',\r\n    },\r\n    {\r\n        data: [65, 59, 84, 84, 51, 55, 40],\r\n        label: 'Organic',\r\n    },\r\n    {\r\n        data: [78, 81, 80, 45, 34, 12, 40],\r\n        label: 'CTR',\r\n    },\r\n    {\r\n        data: [1, 13, 9, 17, 34, 41, 38],\r\n        label: 'Bounce Rate',\r\n    },\r\n];\r\n\r\nconst makeSparkLineData = (dataSetNo, variant) => {\r\n    const dataset = sparkLineChartData[dataSetNo];\r\n    const data = {\r\n        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\r\n        datasets: [\r\n            {\r\n                backgroundColor: 'transparent',\r\n                borderColor: variant ? variant : '#c2cfd6',\r\n                data: dataset.data,\r\n                label: dataset.label,\r\n            },\r\n        ],\r\n    };\r\n    return () => data;\r\n};\r\n\r\nconst sparklineChartOpts = {\r\n    tooltips: {\r\n        enabled: false,\r\n        // custom: CustomTooltips\r\n    },\r\n    responsive: true,\r\n    maintainAspectRatio: true,\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                display: false,\r\n            }],\r\n        yAxes: [\r\n            {\r\n                display: false,\r\n            }],\r\n    },\r\n    elements: {\r\n        line: {\r\n            borderWidth: 2,\r\n        },\r\n        point: {\r\n            radius: 0,\r\n            hitRadius: 10,\r\n            hoverRadius: 4,\r\n            hoverBorderWidth: 3,\r\n        },\r\n    },\r\n    legend: {\r\n        display: false,\r\n    },\r\n};\r\n\r\n// Main Chart\r\n\r\n//Random Numbers\r\nfunction random(min, max) {\r\n    return Math.floor(Math.random() * (max - min + 1) + min);\r\n}\r\n\r\nvar elements = 27;\r\nvar data1 = [];\r\nvar data2 = [];\r\nvar data3 = [];\r\n\r\nfor (var i = 0; i <= elements; i++) {\r\n    data1.push(random(50, 200));\r\n    data2.push(random(80, 100));\r\n    data3.push(65);\r\n}\r\n\r\nconst mainChart = {\r\n    labels: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\r\n    datasets: [\r\n        {\r\n            label: 'My First dataset',\r\n            backgroundColor: hexToRgba(brandInfo, 10),\r\n            borderColor: brandInfo,\r\n            pointHoverBackgroundColor: '#fff',\r\n            borderWidth: 2,\r\n            data: data1,\r\n        },\r\n        {\r\n            label: 'My Second dataset',\r\n            backgroundColor: 'transparent',\r\n            borderColor: brandSuccess,\r\n            pointHoverBackgroundColor: '#fff',\r\n            borderWidth: 2,\r\n            data: data2,\r\n        },\r\n        {\r\n            label: 'My Third dataset',\r\n            backgroundColor: 'transparent',\r\n            borderColor: brandDanger,\r\n            pointHoverBackgroundColor: '#fff',\r\n            borderWidth: 1,\r\n            borderDash: [8, 5],\r\n            data: data3,\r\n        },\r\n    ],\r\n};\r\n\r\nconst mainChartOpts = {\r\n    tooltips: {\r\n        enabled: false,\r\n        // custom: CustomTooltips,\r\n        intersect: true,\r\n        mode: 'index',\r\n        position: 'nearest',\r\n        callbacks: {\r\n            labelColor: function (tooltipItem, chart) {\r\n                return { backgroundColor: chart.data.datasets[tooltipItem.datasetIndex].borderColor }\r\n            }\r\n        }\r\n    },\r\n    maintainAspectRatio: false,\r\n    legend: {\r\n        display: false,\r\n    },\r\n    scales: {\r\n        xAxes: [\r\n            {\r\n                gridLines: {\r\n                    drawOnChartArea: false,\r\n                },\r\n            }],\r\n        yAxes: [\r\n            {\r\n                ticks: {\r\n                    beginAtZero: true,\r\n                    maxTicksLimit: 5,\r\n                    stepSize: Math.ceil(500 / 5),\r\n                    max: 500,\r\n                },\r\n            }],\r\n    },\r\n    elements: {\r\n        point: {\r\n            radius: 0,\r\n            hitRadius: 10,\r\n            hoverRadius: 4,\r\n            hoverBorderWidth: 3,\r\n        },\r\n    },\r\n};\r\n\r\nclass Dashboard extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.toggle = this.toggle.bind(this);\r\n        this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\r\n\r\n        this.state = {\r\n\r\n\r\n            dropdownOpen: false,\r\n            radioSelected: 2,\r\n            mainChart: [],\r\n            mapUrl: {},\r\n            kpi: [\r\n                { total_time: \"\" },\r\n                { total_trucks: \"\" },\r\n                { total_orders: \"\" },\r\n                { total_orders_planned: \"\" },\r\n                { total_rfq: \"\" },\r\n                { total_bids: \"\" },\r\n                { total_orders_hold: \"\" },\r\n                { total_orders_delayed: \"\" },\r\n                { total_orders_pending: \"\" },\r\n                { total_trucks_assigned: \"\" },\r\n                { total_trucks_in_transit: \"\" },\r\n                { total_weight: \"\" },\r\n                { total_distance: \"\" },\r\n\r\n            ],\r\n\r\n            calendarWeekends: true,\r\n            // calendarEvents: {}\r\n            //     // initial event data\r\n            //     { title: \"Event Now\", start: new Date() }\r\n            // ],\r\n\r\n\r\n            events: [\r\n                {\r\n                    totalTrucks: '',\r\n                    weight: 4545,\r\n                    scheduled_date: '2019-09-29',\r\n                    totalWeight: ''\r\n                }\r\n            ]\r\n        }\r\n\r\n\r\n    };\r\n\r\n    calendarComponentRef = React.createRef();\r\n\r\n\r\n    async componentDidMount() {\r\n\r\n        try {\r\n            const kpi = await getKPIData();\r\n            const mapUrl = await getMap();\r\n            console.log(mapUrl);\r\n            this.setState({\r\n                kpi,\r\n                mapUrl\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n        try {\r\n            const map = await getMap(); // fetching the data from api, before the page loaded\r\n            // const kpiData = await kpi.json();\r\n            console.log(map, \"map data\")\r\n            this.setState({\r\n                map,\r\n\r\n            });\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n        const calendarEvent = await getEventsData();\r\n        this.setState({ calendarEvent: calendarEvent }, () => console.log(this.state.calendarEvent));\r\n\r\n        console.log(calendarEvent,\r\n            \"calendarEvents\");\r\n\r\n\r\n        const trucks = await getNumberOfTrucksData();\r\n\r\n        let truckData = [];\r\n        trucks.series[0].data.map(item => {\r\n            truckData.push(item.y);\r\n        });\r\n\r\n        trucks.series[0].data.map(item => {\r\n            truckData.push(item.y);\r\n        });\r\n\r\n\r\n        const weight = await getNumberOfWeightData();\r\n\r\n\r\n        let weightData = [];\r\n        weight.series[0].data.map(item => {\r\n\r\n            weightData.push(item.y);\r\n        });\r\n\r\n        weight.series[0].data.map(item => {\r\n\r\n            weightData.push(item.y);\r\n        });\r\n\r\n        this.setState({\r\n            mainChart: {\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\r\n                datasets: [\r\n                    {\r\n                        label: 'Total Trucks Dispatched',\r\n                        backgroundColor: 'rgb(0,142,255)',\r\n                        borderColor: 'rgb(0,100,255)',\r\n                        borderWidth: 1,\r\n                        hoverBackgroundColor: 'rgb(0,219,255)',\r\n                        hoverBorderColor: 'rgb(0,135,255)',\r\n                        data: truckData\r\n                    },\r\n                ],\r\n\r\n            },\r\n            mainChart2: {\r\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\r\n                datasets: [\r\n                    {\r\n                        label: 'Total Weight Shipped',\r\n                        backgroundColor: 'rgb(0,142,255)',\r\n                        borderColor: 'rgb(0,100,255)',\r\n                        borderWidth: 1,\r\n                        hoverBackgroundColor: 'rgb(0,219,255)',\r\n                        hoverBorderColor: 'rgb(0,135,255)',\r\n                        data: weightData\r\n                    }\r\n                ],\r\n\r\n            }\r\n        })\r\n    }\r\n\r\n    toggle() {\r\n        this.setState({\r\n            dropdownOpen: !this.state.dropdownOpen,\r\n        });\r\n    }\r\n\r\n    onRadioBtnClick(radioSelected) {\r\n        this.setState({\r\n            radioSelected: radioSelected,\r\n        });\r\n    }\r\n\r\n    handleDateClick = arg => {\r\n        if (window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")) {\r\n            this.setState({\r\n                // add new event data\r\n                calendarEvents: this.state.calendarEvents.concat({\r\n                    // creates a new array\r\n                    title: \"New Event\",\r\n                    start: arg.date,\r\n                    allDay: arg.allDay\r\n                })\r\n            });\r\n            return;\r\n        }\r\n    };\r\n\r\n\r\n    loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"animated fadeIn\">\r\n                <Row>\r\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\r\n                        <Card className=\"text-white bg-info\">\r\n                            <CardBody className=\"pb-0\">\r\n                                <ButtonGroup className=\"float-right\">\r\n                                    <ButtonDropdown id='card1' isOpen={this.state.card1} toggle={() => {\r\n                                        this.setState({ card1: !this.state.card1 });\r\n                                    }}>\r\n\r\n                                    </ButtonDropdown>\r\n                                </ButtonGroup>\r\n                                {\r\n                                    this.state.kpi.map(item => (\r\n                                        <div className=\"text-value\">{item.total_orders_pending}</div>\r\n                                    ))\r\n                                }\r\n                                <div>Orders to Ship</div>\r\n                            </CardBody>\r\n                            <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\r\n                                <Line data={cardChartData2} options={cardChartOpts2} height={70} />\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\r\n                        <Card className=\"text-white bg-primary\">\r\n                            <CardBody className=\"pb-0\">\r\n                                <ButtonGroup className=\"float-right\">\r\n                                    <Dropdown id='card2' isOpen={this.state.card2} toggle={() => {\r\n                                        this.setState({ card2: !this.state.card2 });\r\n                                    }}>\r\n\r\n                                    </Dropdown>\r\n                                </ButtonGroup>\r\n                                {\r\n                                    this.state.kpi.map(item => (\r\n                                        <div className=\"text-value\">{item.total_trucks}</div>\r\n                                    ))}\r\n\r\n                                <div>Total dispatches</div>\r\n                            </CardBody>\r\n                            <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\r\n                                <Line data={cardChartData1} options={cardChartOpts1} height={70} />\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\r\n                        <Card className=\"text-white bg-warning\">\r\n                            <CardBody className=\"pb-0\">\r\n                                <ButtonGroup className=\"float-right\">\r\n                                    <Dropdown id='card3' isOpen={this.state.card3} toggle={() => {\r\n                                        this.setState({ card3: !this.state.card3 });\r\n                                    }}>\r\n\r\n                                    </Dropdown>\r\n                                </ButtonGroup>\r\n                                {\r\n                                    this.state.kpi.map(item => (\r\n                                        <div className=\"text-value\">{item.total_rfq}</div>\r\n                                    ))}\r\n\r\n                                <div>Total RFQs</div>\r\n                            </CardBody>\r\n                            <div className=\"chart-wrapper\" style={{ height: '70px' }}>\r\n                                <Line data={cardChartData3} options={cardChartOpts3} height={70} />\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n\r\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\r\n                        <Card className=\"text-white bg-danger\">\r\n                            <CardBody className=\"pb-0\">\r\n                                <ButtonGroup className=\"float-right\">\r\n                                    <ButtonDropdown id='card4' isOpen={this.state.card4} toggle={() => {\r\n                                        this.setState({ card4: !this.state.card4 });\r\n                                    }}>\r\n\r\n\r\n                                    </ButtonDropdown>\r\n                                </ButtonGroup>\r\n                                {\r\n                                    this.state.kpi.map(item => (\r\n                                        <div className=\"text-value\">{item.total_time}</div>\r\n                                    ))}\r\n\r\n                                <div>Total Time (Hours)</div>\r\n                            </CardBody>\r\n                            <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\r\n                                <Bar data={cardChartData4} options={cardChartOpts4} height={70} />\r\n                            </div>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <CardHeader>\r\n                                Shipment Stats\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\r\n\r\n\r\n                                        <Card>\r\n                                            <CardBody>\r\n\r\n                                                <div className=\"chart-wrapper\"\r\n                                                    style={{ height: 300 + 'px', marginTop: 40 + 'px' }}>\r\n                                                    {/*<Line data={this.state.mainChart} options={mainChartOpts} height={300} />*/}\r\n                                                    <Bar data={this.state.mainChart} height={125} />\r\n                                                </div>\r\n                                            </CardBody>\r\n                                        </Card>\r\n\r\n\r\n                                    </Col>\r\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\r\n                                        <Card>\r\n                                            <CardBody>\r\n                                                <div className=\"chart-wrapper\"\r\n                                                    style={{ height: 300 + 'px', marginTop: 40 + 'px' }}>\r\n                                                    {/*<Line data={this.state.mainChart} options={mainChartOpts} height={300} />*/}\r\n                                                    <Bar data={this.state.mainChart2} height={125} />\r\n                                                </div>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n\r\n                <Row>\r\n                    <Col>\r\n                        <Card>\r\n                            <CardHeader>\r\n                                Location and Planning\r\n                            </CardHeader>\r\n                            <CardBody>\r\n                                <Row>\r\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\r\n                                        <Card>\r\n                                            <CardBody style={{ paddingTop: '0' }}>\r\n                                                <div className=\"chart-wrapper\"\r\n                                                    style={{ height: 650 + 'px', marginTop: 10 + 'px', padding: '0' }}>\r\n                                                    <Iframe\r\n                                                        url={this.state.mapUrl.map2}\r\n                                                        width=\"100%\"\r\n                                                        height=\"100%\"\r\n                                                        id=\"myId\"\r\n                                                        className=\"myClassname\"\r\n                                                    // display=\"initial\"\r\n                                                    // position=\"relative\"\r\n                                                    />\r\n                                                </div>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\r\n\r\n\r\n                                        <Card>\r\n                                            <CardBody>\r\n\r\n\r\n                                                <div className=\"chart-wrapper\"\r\n                                                    style={{ height: 650 + 'px', marginTop: 0 + 'px' }}>\r\n                                                    {<FullCalendar defaultView=\"dayGridMonth\"\r\n\r\n\r\n                                                        events={[{\r\n                                                            title: this.state.events[0].weight.toString(),\r\n                                                            date: this.state.events[0].scheduled_date.slice(0, 10)\r\n                                                        }]}\r\n                                                        header={{\r\n                                                            left: \"prev,next today\",\r\n                                                            center: \"title\",\r\n                                                            right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\r\n                                                        }}\r\n                                                        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\r\n                                                        dateClick={this.handleDateClick}\r\n                                                        ref={this.calendarComponentRef}\r\n                                                    />}\r\n                                                </div>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n\r\n                </Row>\r\n\r\n\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Dashboard;\r\n"],"sourceRoot":""}