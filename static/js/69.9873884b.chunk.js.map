{"version":3,"sources":["screens/shipper/dashboard.js"],"names":["brandPrimary","lazy","__webpack_require__","e","then","bind","getStyle","brandSuccess","brandInfo","brandDanger","cardChartData1","labels","datasets","label","backgroundColor","borderColor","data","cardChartOpts1","tooltips","enabled","maintainAspectRatio","legend","display","scales","xAxes","gridLines","color","zeroLineColor","ticks","fontSize","fontColor","yAxes","min","Math","apply","max","elements","line","borderWidth","point","radius","hitRadius","hoverRadius","cardChartData2","cardChartOpts2","tension","cardChartData3","cardChartOpts3","cardChartData4","cardChartOpts4","barPercentage","random","floor","data1","data2","data3","i","push","hexToRgba","ceil","Dashboard","props","_this","Object","_Users_faisal_Desktop_yantraksh_nativeApp_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_2__","this","_Users_faisal_Desktop_yantraksh_nativeApp_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_4__","_Users_faisal_Desktop_yantraksh_nativeApp_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_5__","call","calendarComponentRef","React","createRef","handleDateClick","arg","window","confirm","dateStr","setState","calendarEvents","state","concat","title","start","date","allDay","loading","react__WEBPACK_IMPORTED_MODULE_8___default","a","createElement","className","toggle","_Users_faisal_Desktop_yantraksh_nativeApp_yantraksh_react_frontend_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_assertThisInitialized__WEBPACK_IMPORTED_MODULE_6__","onRadioBtnClick","dropdownOpen","radioSelected","mainChart","mapUrl","kpi","total_time","total_trucks","total_orders","total_orders_planned","total_rfq","total_bids","total_orders_hold","total_orders_delayed","total_orders_pending","total_trucks_assigned","total_trucks_in_transit","total_weight","total_distance","calendarWeekends","events","totalTrucks","weight","scheduled_date","totalWeight","getKPIData","getMap","console","log","_context","t0","map","t1","getEventsData","calendarEvent","_this2","getNumberOfTrucksData","trucks","truckData","series","item","y","getNumberOfWeightData","weightData","hoverBackgroundColor","hoverBorderColor","mainChart2","_this3","reactstrap__WEBPACK_IMPORTED_MODULE_10__","reactstrap__WEBPACK_IMPORTED_MODULE_11__","xs","sm","lg","reactstrap__WEBPACK_IMPORTED_MODULE_12__","reactstrap__WEBPACK_IMPORTED_MODULE_13__","reactstrap__WEBPACK_IMPORTED_MODULE_14__","reactstrap__WEBPACK_IMPORTED_MODULE_15__","id","isOpen","card1","style","height","react_chartjs_2__WEBPACK_IMPORTED_MODULE_9__","options","reactstrap__WEBPACK_IMPORTED_MODULE_16__","card2","card3","card4","reactstrap__WEBPACK_IMPORTED_MODULE_17__","md","xl","marginTop","paddingTop","padding","react_iframe__WEBPACK_IMPORTED_MODULE_20__","url","map2","width","_fullcalendar_react__WEBPACK_IMPORTED_MODULE_21__","defaultView","toString","slice","header","left","center","right","plugins","dayGridPlugin","timeGridPlugin","interactionPlugin","dateClick","ref","Component"],"mappings":"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","file":"static/js/69.9873884b.chunk.js","sourcesContent":["import React, { Component, lazy } from 'react';\nimport { Bar, Line, } from 'react-chartjs-2';\nimport { ButtonDropdown, ButtonGroup, Card, CardBody, CardHeader, CardTitle, Col, Dropdown, Row, } from 'reactstrap';\n\nimport { getStyle, hexToRgba } from '@coreui/coreui/dist/js/coreui-utilities'\nimport { getEventsData, getKPIData, getMap, getNumberOfTrucksData, getNumberOfWeightData } from \"../../helpers/api\";\nimport Iframe from 'react-iframe'\n\nimport FullCalendar from '@fullcalendar/react'\n\nimport dayGridPlugin from \"@fullcalendar/daygrid\";\nimport timeGridPlugin from \"@fullcalendar/timegrid\";\nimport interactionPlugin from \"@fullcalendar/interaction\";\n\n\nconst Widget03 = lazy(() => import('../../components/Widgets/Widget03'));\n\nconst brandPrimary = getStyle('--primary');\nconst brandSuccess = getStyle('--success');\nconst brandInfo = getStyle('--info');\nconst brandWarning = getStyle('--warning');\nconst brandDanger = getStyle('--danger');\n\n// Card Chart 1\nconst cardChartData1 = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: brandPrimary,\n            borderColor: 'rgba(255,255,255,.55)',\n            data: [65, 59, 84, 84, 51, 55, 40],\n        },\n    ],\n};\n\nconst cardChartOpts1 = {\n    tooltips: {\n        enabled: false,\n        // custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                gridLines: {\n                    color: 'transparent',\n                    zeroLineColor: 'transparent',\n                },\n                ticks: {\n                    fontSize: 2,\n                    fontColor: 'transparent',\n                },\n\n            }],\n        yAxes: [\n            {\n                display: false,\n                ticks: {\n                    display: false,\n                    min: Math.min.apply(Math, cardChartData1.datasets[0].data) - 5,\n                    max: Math.max.apply(Math, cardChartData1.datasets[0].data) + 5,\n                },\n            }],\n    },\n    elements: {\n        line: {\n            borderWidth: 1,\n        },\n        point: {\n            radius: 4,\n            hitRadius: 10,\n            hoverRadius: 4,\n        },\n    }\n}\n\n\n// Card Chart 2\nconst cardChartData2 = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: brandInfo,\n            borderColor: 'rgba(255,255,255,.55)',\n            data: [1, 18, 9, 17, 34, 22, 11],\n        },\n    ],\n};\n\nconst cardChartOpts2 = {\n    tooltips: {\n        enabled: false,\n        // custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                gridLines: {\n                    color: 'transparent',\n                    zeroLineColor: 'transparent',\n                },\n                ticks: {\n                    fontSize: 2,\n                    fontColor: 'transparent',\n                },\n\n            }],\n        yAxes: [\n            {\n                display: false,\n                ticks: {\n                    display: false,\n                    min: Math.min.apply(Math, cardChartData2.datasets[0].data) - 5,\n                    max: Math.max.apply(Math, cardChartData2.datasets[0].data) + 5,\n                },\n            }],\n    },\n    elements: {\n        line: {\n            tension: 0.00001,\n            borderWidth: 1,\n        },\n        point: {\n            radius: 4,\n            hitRadius: 10,\n            hoverRadius: 4,\n        },\n    },\n};\n\n// Card Chart 3\nconst cardChartData3 = {\n    labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: 'rgba(255,255,255,.2)',\n            borderColor: 'rgba(255,255,255,.55)',\n            data: [78, 81, 80, 45, 34, 12, 40],\n        },\n    ],\n};\n\nconst cardChartOpts3 = {\n    tooltips: {\n        enabled: false,\n        // custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                display: false,\n            }],\n        yAxes: [\n            {\n                display: false,\n            }],\n    },\n    elements: {\n        line: {\n            borderWidth: 2,\n        },\n        point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n        },\n    },\n};\n\n// Card Chart 4\nconst cardChartData4 = {\n    labels: ['', '', '', '', '', '', '', '', '', '', '', '', '', '', '', ''],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: 'rgba(255,255,255,.3)',\n            borderColor: 'transparent',\n            data: [78, 81, 80, 45, 34, 12, 40, 75, 34, 89, 32, 68, 54, 72, 18, 98],\n        },\n    ],\n};\n\nconst cardChartOpts4 = {\n    tooltips: {\n        enabled: false,\n        // custom: CustomTooltips\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                display: false,\n                barPercentage: 0.6,\n            }],\n        yAxes: [\n            {\n                display: false,\n            }],\n    },\n};\n\n// Social Box Chart\nconst socialBoxData = [\n    { data: [65, 59, 84, 84, 51, 55, 40], label: 'facebook' },\n    { data: [1, 13, 9, 17, 34, 41, 38], label: 'twitter' },\n    { data: [78, 81, 80, 45, 34, 12, 40], label: 'linkedin' },\n    { data: [35, 23, 56, 22, 97, 23, 64], label: 'google' },\n];\n\nconst makeSocialBoxData = (dataSetNo) => {\n    const dataset = socialBoxData[dataSetNo];\n    const data = {\n        labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July'],\n        datasets: [\n            {\n                backgroundColor: 'rgba(255,255,255,.1)',\n                borderColor: 'rgba(255,255,255,.55)',\n                pointHoverBackgroundColor: '#fff',\n                borderWidth: 2,\n                data: dataset.data,\n                label: dataset.label,\n            },\n        ],\n    };\n    return () => data;\n};\n\nconst socialChartOpts = {\n    tooltips: {\n        enabled: false,\n        // custom: CustomTooltips\n    },\n    responsive: true,\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                display: false,\n            }],\n        yAxes: [\n            {\n                display: false,\n            }],\n    },\n    elements: {\n        point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3,\n        },\n    },\n};\n\n// sparkline charts\nconst sparkLineChartData = [\n    {\n        data: [35, 23, 56, 22, 97, 23, 64],\n        label: 'New Clients',\n    },\n    {\n        data: [65, 59, 84, 84, 51, 55, 40],\n        label: 'Recurring Clients',\n    },\n    {\n        data: [35, 23, 56, 22, 97, 23, 64],\n        label: 'Pageviews',\n    },\n    {\n        data: [65, 59, 84, 84, 51, 55, 40],\n        label: 'Organic',\n    },\n    {\n        data: [78, 81, 80, 45, 34, 12, 40],\n        label: 'CTR',\n    },\n    {\n        data: [1, 13, 9, 17, 34, 41, 38],\n        label: 'Bounce Rate',\n    },\n];\n\nconst makeSparkLineData = (dataSetNo, variant) => {\n    const dataset = sparkLineChartData[dataSetNo];\n    const data = {\n        labels: ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'],\n        datasets: [\n            {\n                backgroundColor: 'transparent',\n                borderColor: variant ? variant : '#c2cfd6',\n                data: dataset.data,\n                label: dataset.label,\n            },\n        ],\n    };\n    return () => data;\n};\n\nconst sparklineChartOpts = {\n    tooltips: {\n        enabled: false,\n        // custom: CustomTooltips\n    },\n    responsive: true,\n    maintainAspectRatio: true,\n    scales: {\n        xAxes: [\n            {\n                display: false,\n            }],\n        yAxes: [\n            {\n                display: false,\n            }],\n    },\n    elements: {\n        line: {\n            borderWidth: 2,\n        },\n        point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3,\n        },\n    },\n    legend: {\n        display: false,\n    },\n};\n\n// Main Chart\n\n//Random Numbers\nfunction random(min, max) {\n    return Math.floor(Math.random() * (max - min + 1) + min);\n}\n\nvar elements = 27;\nvar data1 = [];\nvar data2 = [];\nvar data3 = [];\n\nfor (var i = 0; i <= elements; i++) {\n    data1.push(random(50, 200));\n    data2.push(random(80, 100));\n    data3.push(65);\n}\n\nconst mainChart = {\n    labels: ['Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa', 'Su'],\n    datasets: [\n        {\n            label: 'My First dataset',\n            backgroundColor: hexToRgba(brandInfo, 10),\n            borderColor: brandInfo,\n            pointHoverBackgroundColor: '#fff',\n            borderWidth: 2,\n            data: data1,\n        },\n        {\n            label: 'My Second dataset',\n            backgroundColor: 'transparent',\n            borderColor: brandSuccess,\n            pointHoverBackgroundColor: '#fff',\n            borderWidth: 2,\n            data: data2,\n        },\n        {\n            label: 'My Third dataset',\n            backgroundColor: 'transparent',\n            borderColor: brandDanger,\n            pointHoverBackgroundColor: '#fff',\n            borderWidth: 1,\n            borderDash: [8, 5],\n            data: data3,\n        },\n    ],\n};\n\nconst mainChartOpts = {\n    tooltips: {\n        enabled: false,\n        // custom: CustomTooltips,\n        intersect: true,\n        mode: 'index',\n        position: 'nearest',\n        callbacks: {\n            labelColor: function (tooltipItem, chart) {\n                return { backgroundColor: chart.data.datasets[tooltipItem.datasetIndex].borderColor }\n            }\n        }\n    },\n    maintainAspectRatio: false,\n    legend: {\n        display: false,\n    },\n    scales: {\n        xAxes: [\n            {\n                gridLines: {\n                    drawOnChartArea: false,\n                },\n            }],\n        yAxes: [\n            {\n                ticks: {\n                    beginAtZero: true,\n                    maxTicksLimit: 5,\n                    stepSize: Math.ceil(500 / 5),\n                    max: 500,\n                },\n            }],\n    },\n    elements: {\n        point: {\n            radius: 0,\n            hitRadius: 10,\n            hoverRadius: 4,\n            hoverBorderWidth: 3,\n        },\n    },\n};\n\nclass Dashboard extends Component {\n    constructor(props) {\n        super(props);\n\n        this.toggle = this.toggle.bind(this);\n        this.onRadioBtnClick = this.onRadioBtnClick.bind(this);\n\n        this.state = {\n\n\n            dropdownOpen: false,\n            radioSelected: 2,\n            mainChart: [],\n            mapUrl: {},\n            kpi: [\n                { total_time: \"\" },\n                { total_trucks: \"\" },\n                { total_orders: \"\" },\n                { total_orders_planned: \"\" },\n                { total_rfq: \"\" },\n                { total_bids: \"\" },\n                { total_orders_hold: \"\" },\n                { total_orders_delayed: \"\" },\n                { total_orders_pending: \"\" },\n                { total_trucks_assigned: \"\" },\n                { total_trucks_in_transit: \"\" },\n                { total_weight: \"\" },\n                { total_distance: \"\" },\n\n            ],\n\n            calendarWeekends: true,\n            // calendarEvents: {}\n            //     // initial event data\n            //     { title: \"Event Now\", start: new Date() }\n            // ],\n\n\n            events: [\n                {\n                    totalTrucks: '',\n                    weight: 4545,\n                    scheduled_date: '2019-09-29',\n                    totalWeight: ''\n                }\n            ]\n        }\n\n\n    };\n\n    calendarComponentRef = React.createRef();\n\n\n    async componentDidMount() {\n\n        try {\n            const kpi = await getKPIData();\n            const mapUrl = await getMap();\n            console.log(mapUrl);\n            this.setState({\n                kpi,\n                mapUrl\n            });\n        } catch (e) {\n            console.log(e);\n        }\n\n        try {\n            const map = await getMap(); // fetching the data from api, before the page loaded\n            // const kpiData = await kpi.json();\n            console.log(map, \"map data\")\n            this.setState({\n                map,\n\n            });\n        } catch (e) {\n            console.log(e);\n        }\n\n        const calendarEvent = await getEventsData();\n        this.setState({ calendarEvent: calendarEvent }, () => console.log(this.state.calendarEvent));\n\n        console.log(calendarEvent,\n            \"calendarEvents\");\n\n\n        const trucks = await getNumberOfTrucksData();\n\n        let truckData = [];\n        trucks.series[0].data.map(item => {\n            truckData.push(item.y);\n        });\n\n        trucks.series[0].data.map(item => {\n            truckData.push(item.y);\n        });\n\n\n        const weight = await getNumberOfWeightData();\n\n\n        let weightData = [];\n        weight.series[0].data.map(item => {\n\n            weightData.push(item.y);\n        });\n\n        weight.series[0].data.map(item => {\n\n            weightData.push(item.y);\n        });\n\n        this.setState({\n            mainChart: {\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n                datasets: [\n                    {\n                        label: 'Total Trucks Dispatched',\n                        backgroundColor: 'rgb(0,142,255)',\n                        borderColor: 'rgb(0,100,255)',\n                        borderWidth: 1,\n                        hoverBackgroundColor: 'rgb(0,219,255)',\n                        hoverBorderColor: 'rgb(0,135,255)',\n                        data: truckData\n                    },\n                ],\n\n            },\n            mainChart2: {\n                labels: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'],\n                datasets: [\n                    {\n                        label: 'Total Weight Shipped',\n                        backgroundColor: 'rgb(0,142,255)',\n                        borderColor: 'rgb(0,100,255)',\n                        borderWidth: 1,\n                        hoverBackgroundColor: 'rgb(0,219,255)',\n                        hoverBorderColor: 'rgb(0,135,255)',\n                        data: weightData\n                    }\n                ],\n\n            }\n        })\n    }\n\n    toggle() {\n        this.setState({\n            dropdownOpen: !this.state.dropdownOpen,\n        });\n    }\n\n    onRadioBtnClick(radioSelected) {\n        this.setState({\n            radioSelected: radioSelected,\n        });\n    }\n\n    handleDateClick = arg => {\n        if (window.confirm(\"Would you like to add an event to \" + arg.dateStr + \" ?\")) {\n            this.setState({\n                // add new event data\n                calendarEvents: this.state.calendarEvents.concat({\n                    // creates a new array\n                    title: \"New Event\",\n                    start: arg.date,\n                    allDay: arg.allDay\n                })\n            });\n            return;\n        }\n    };\n\n\n    loading = () => <div className=\"animated fadeIn pt-1 text-center\">Loading...</div>;\n\n\n    render() {\n        return (\n            <div className=\"animated fadeIn\">\n                <Row>\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\n                        <Card className=\"text-white bg-info\">\n                            <CardBody className=\"pb-0\">\n                                <ButtonGroup className=\"float-right\">\n                                    <ButtonDropdown id='card1' isOpen={this.state.card1} toggle={() => {\n                                        this.setState({ card1: !this.state.card1 });\n                                    }}>\n\n                                    </ButtonDropdown>\n                                </ButtonGroup>\n                                {\n                                    this.state.kpi.map(item => (\n                                        <div className=\"text-value\">{item.total_orders_pending}</div>\n                                    ))\n                                }\n                                <div>Orders to Ship</div>\n                            </CardBody>\n                            <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\n                                <Line data={cardChartData2} options={cardChartOpts2} height={70} />\n                            </div>\n                        </Card>\n                    </Col>\n\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\n                        <Card className=\"text-white bg-primary\">\n                            <CardBody className=\"pb-0\">\n                                <ButtonGroup className=\"float-right\">\n                                    <Dropdown id='card2' isOpen={this.state.card2} toggle={() => {\n                                        this.setState({ card2: !this.state.card2 });\n                                    }}>\n\n                                    </Dropdown>\n                                </ButtonGroup>\n                                {\n                                    this.state.kpi.map(item => (\n                                        <div className=\"text-value\">{item.total_trucks}</div>\n                                    ))}\n\n                                <div>Total dispatches</div>\n                            </CardBody>\n                            <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\n                                <Line data={cardChartData1} options={cardChartOpts1} height={70} />\n                            </div>\n                        </Card>\n                    </Col>\n\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\n                        <Card className=\"text-white bg-warning\">\n                            <CardBody className=\"pb-0\">\n                                <ButtonGroup className=\"float-right\">\n                                    <Dropdown id='card3' isOpen={this.state.card3} toggle={() => {\n                                        this.setState({ card3: !this.state.card3 });\n                                    }}>\n\n                                    </Dropdown>\n                                </ButtonGroup>\n                                {\n                                    this.state.kpi.map(item => (\n                                        <div className=\"text-value\">{item.total_rfq}</div>\n                                    ))}\n\n                                <div>Total RFQs</div>\n                            </CardBody>\n                            <div className=\"chart-wrapper\" style={{ height: '70px' }}>\n                                <Line data={cardChartData3} options={cardChartOpts3} height={70} />\n                            </div>\n                        </Card>\n                    </Col>\n\n                    <Col xs=\"12\" sm=\"6\" lg=\"3\">\n                        <Card className=\"text-white bg-danger\">\n                            <CardBody className=\"pb-0\">\n                                <ButtonGroup className=\"float-right\">\n                                    <ButtonDropdown id='card4' isOpen={this.state.card4} toggle={() => {\n                                        this.setState({ card4: !this.state.card4 });\n                                    }}>\n\n\n                                    </ButtonDropdown>\n                                </ButtonGroup>\n                                {\n                                    this.state.kpi.map(item => (\n                                        <div className=\"text-value\">{item.total_time}</div>\n                                    ))}\n\n                                <div>Total Time (Hours)</div>\n                            </CardBody>\n                            <div className=\"chart-wrapper mx-3\" style={{ height: '70px' }}>\n                                <Bar data={cardChartData4} options={cardChartOpts4} height={70} />\n                            </div>\n                        </Card>\n                    </Col>\n                </Row>\n                <Row>\n                    <Col>\n                        <Card>\n                            <CardHeader>\n                                Shipment Stats\n                            </CardHeader>\n                            <CardBody>\n                                <Row>\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\n\n\n                                        <Card>\n                                            <CardBody>\n\n                                                <div className=\"chart-wrapper\"\n                                                    style={{ height: 300 + 'px', marginTop: 40 + 'px' }}>\n                                                    {/*<Line data={this.state.mainChart} options={mainChartOpts} height={300} />*/}\n                                                    <Bar data={this.state.mainChart} height={125} />\n                                                </div>\n                                            </CardBody>\n                                        </Card>\n\n\n                                    </Col>\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\n                                        <Card>\n                                            <CardBody>\n                                                <div className=\"chart-wrapper\"\n                                                    style={{ height: 300 + 'px', marginTop: 40 + 'px' }}>\n                                                    {/*<Line data={this.state.mainChart} options={mainChartOpts} height={300} />*/}\n                                                    <Bar data={this.state.mainChart2} height={125} />\n                                                </div>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n\n                            </CardBody>\n                        </Card>\n                    </Col>\n\n                </Row>\n\n\n                <Row>\n                    <Col>\n                        <Card>\n                            <CardHeader>\n                                Location and Planning\n                            </CardHeader>\n                            <CardBody>\n                                <Row>\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\n                                        <Card>\n                                            <CardBody style={{ paddingTop: '0' }}>\n                                                <div className=\"chart-wrapper\"\n                                                    style={{ height: 650 + 'px', marginTop: 10 + 'px', padding: '0' }}>\n                                                    <Iframe\n                                                        url={this.state.mapUrl.map2}\n                                                        width=\"100%\"\n                                                        height=\"100%\"\n                                                        id=\"myId\"\n                                                        className=\"myClassname\"\n                                                    // display=\"initial\"\n                                                    // position=\"relative\"\n                                                    />\n                                                </div>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                    <Col xs=\"12\" md=\"6\" xl=\"6\">\n\n\n                                        <Card>\n                                            <CardBody>\n\n\n                                                <div className=\"chart-wrapper\"\n                                                    style={{ height: 650 + 'px', marginTop: 0 + 'px' }}>\n                                                    {<FullCalendar defaultView=\"dayGridMonth\"\n\n\n                                                        events={[{\n                                                            title: this.state.events[0].weight.toString(),\n                                                            date: this.state.events[0].scheduled_date.slice(0, 10)\n                                                        }]}\n                                                        header={{\n                                                            left: \"prev,next today\",\n                                                            center: \"title\",\n                                                            right: \"dayGridMonth,timeGridWeek,timeGridDay,listWeek\"\n                                                        }}\n                                                        plugins={[dayGridPlugin, timeGridPlugin, interactionPlugin]}\n                                                        dateClick={this.handleDateClick}\n                                                        ref={this.calendarComponentRef}\n                                                    />}\n                                                </div>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n\n                            </CardBody>\n                        </Card>\n                    </Col>\n\n                </Row>\n\n\n            </div>\n        );\n    }\n}\n\nexport default Dashboard;\n"],"sourceRoot":""}